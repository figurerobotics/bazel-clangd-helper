#!/bin/bash
# Copyright 2024 Figure AI, Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Usage: bazel run //:generate_compile_commands -- <build_targets>

set -eu

build_targets=("$@")
if [ ${#build_targets[@]} -eq 0 ]; then
    echo "No build targets provided." >&2
    exit 1
fi

# When running from a sh_binary, the workspace dir is a directory in bazel-out.
# `bazel info workspace` cannot be called from here so find the actual directory.
if [ -n "${BUILD_WORKSPACE_DIRECTORY}" ]; then
    workspace_dir="${BUILD_WORKSPACE_DIRECTORY}"
else
    workspace_dir="$(bazel info workspace)"
fi
echo "Running from workspace directory: ${workspace_dir}"
cd "${workspace_dir}"

events_file=$(mktemp)

bazel build \
    --aspects=@bazel_clangd_helper//:build_defs.bzl%compile_commands_aspect \
    --output_groups=report \
    --build_event_json_file="${events_file}" \
    "${build_targets[@]}"

bazel_bin_dir="$(bazel info bazel-bin)"

# Combine all of the compile command fragments into a single compile_commands.json file.
output_file="${workspace_dir}/compile_commands.json"
echo "[" >"${output_file}"

# Extract *.compile_commands.json paths from the build events json file and
# iterate over them.
for i in $(grep -o -E '([^"]+compile_commands\.json)' ${events_file}); do
  cat "${bazel_bin_dir}/$i" >> ${output_file};
done;

# Replace the placeholder workspace directory.
sed -i "s|__BAZEL_WORKSPACE_DIR__|${workspace_dir}|g" "${output_file}"
# Strip the last trailing comma.
sed -i '$ s/,$//' "${output_file}"
echo "]" >>"${output_file}"

echo "Updated ${output_file}"

# Create the external symlink if not present already.
if [ ! -e "${workspace_dir}/external" ]; then
    ln -s "bazel-out/../../../external" "${workspace_dir}/external"
fi

# Update the local git exclude file if the line isn't present.
GITIGNORE_LINES=(
    "### Autogenerated by bazel_clangd_helper."
    "/external"
    "/compile_commands.json"
    ".cache/"
)
for line in "${GITIGNORE_LINES[@]}"; do
    if ! grep -q "${line}" "${workspace_dir}/.git/info/exclude"; then
        echo "${line}" >>"${workspace_dir}/.git/info/exclude"
    fi
done
